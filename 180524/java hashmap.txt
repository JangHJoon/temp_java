Java HashMap에서 사용하는 방식은 Separate Channing이다. 
Open Addressing은 데이터를 삭제할 때 처리가 효율적이기 어려운데, 
HashMap에서 remove() 메서드는 매우 빈번하게 호출될 수 있기 때문이다. 
게다가 HashMap에 저장된 키-값 쌍 개수가 일정 개수 이상으로 많아지면, 
일반적으로 Open Addressing은 Separate Chaining보다 느리다. 

Open Addressing의 경우 해시 버킷을 채운 밀도가 높아질수록 
Worst Case 발생 빈도가 더 높아지기 때문이다. 

반면 Separate Chaining 방식의 경우 해시 충돌이 잘 발생하지 않도록 '조정'할 수 있다면 
Worst Case 또는 Worst Case에 가까운 일이 발생하는 것을 줄일 수 있다


그러나 Java 8에서는 예제 4에서 볼 수 있는 것보다 더 발전된 방식을 사용한다.
Java 8 HashMap에서의 Separate Chaining
Java 2부터 Java 7까지의 HashMap에서 Separate Chaining 구현 코드는 조금씩 다르지만, 구
현 알고리즘 자체는 같았다. 만약 객체의 해시 함수 값이 균등 분포(uniform distribution) 상태라고 할 때, 
get() 메서드 호출에 대한 기댓값은 hashmap5이다. 그러나 Java 8에서는 이보다 더 나은 hashmap6을 보장한다. 
데이터의 개수가 많아지면, Separate Chaining에서 링크드 리스트 대신 트리를 사용하기 때문이다.

그런데 이렇게 해시 버킷 크기를 두 배로 확장하는 것에는 결정적인 문제가 있다. 
해시 버킷의 개수 M이 2a 형태가 되기 때문에, index = X.hashCode() % M을 계산할 때 
X.hashCode()의 하위 a개의 비트만 사용하게 된다는 것이다. 
즉 해시 함수가 32비트 영역을 고르게 사용하도록 만들었다 하더라도 
해시 값을 2의 승수로 나누면 해시 충돌이 쉽게 발생할 수 있다.

이 때문에 보조 해시 함수가 필요하다.

보조 해시 함수(supplement hash function)의 목적은 '키'의 해시 값을 변형하여, 
해시 충돌 가능성을 줄이는 것이다. 이 보조 해시 함수는 JDK 1.4에 처음 등장했다. 
Java 5 ~ Java 7은 같은 방식의 보조 해시 함수를 사용하고, 
Java 8부터는 다시 새로운 방식의 보조 해시 함수를 사용하고 있다.

/*

예제 11 Java String 클래스 해시 함수

public int hashCode() {  
        int h = hash;
        if (h == 0 && value.length > 0) {
            char val[] = value;

            for (int i = 0; i < value.length; i++) {
                h = 31 * h + val[i];
            }
            hash = h;
        }
        return h;
    }
예제 11은 Horner's method를 구현한 것이다. 

Horner's method는 다항식을 계산하기 쉽도록 단항식으로 이루어진 식으로 표현하는 것이다. 
즉 예제 11에서 계산하고자 하는 해시 값 h는 다음과 같다.

이렇게 단항식을 재귀적으로 사용하여 다항식 연산을 표현할 수 있다.

String 객체 해시 함수에서 31을 사용하는 이유는, 
31이 소수이며 또한 어떤 수에 31을 곱하는 것은 빠르게 계산할 수 있기 때문이다.
31N=32N-N인데, 32는 25이니 어떤 수에 대한 32를 곱한 값은 shift 연산으로 쉽게 구현할 수 있다. 
따라서 N에 31을 곱한 값은, (N << 5) – N과 같다. 
31을 곱하는 연산은 이렇게 최적화된 머신 코드로 생성할 수 있기 때문에, 
String 클래스에서 해시 값을 계산할 때에는 31을 승수로 사용한다.


지금까지 설명한 내용을 요약하면, Java HashMap에서는 해시 충돌을 방지하기 위하여 
Separate Chaining과 보조 해시 함수를 사용한다는 것, J
ava 8에서는 Separate Chaining에서 링크드 리스트 대신 트리를 사용하기도 한다는 것, 
그리고 String 클래스의 hashCode() 메서드에서 31을 승수로 사용하는 이유는 
성능 향상 도모를 위한 것이라고 정리할 수 있다.

HashMap은 첫 등장 이후, 성능 향상을 위하여 꾸준하게 개선되어 왔다. 
JDK 1.4에서 처음 등장한 보조 해시 함수와 Java 8의 트리 노드가 대표적인 예다.

그러나 Java 7의 일부 버전에서 사용했던 MurMur 해시처럼 성능 향상을 위하여 시도했던 것이, 
결과적으로 좋지 않아 결국에는 삭제되기도 하고, 
많은 해시 함수가 균등 분포 결과 값을 내도록 잘 작성됨에 따라 
기존보다 더 단순한 형태의 보조 해시 함수를 사용하도록 변화하기도 했다.

웹 애플리케이션 서버의 경우에는 HTTPRequest가 생성될 때마다, 
여러 개의 HashMap이 생성된다. 수많은 HashMap 객체가 1초도 안 되는 시간에 생성되고 
또 GC(garbage collection) 대상이 된다. 
컴퓨터 메모리 크기가 보편적으로 증가하게 됨에 따라, 
메모리 중심적인 애플리케이션 제작도 늘었다. 
따라서 갈수록 HashMap에 더 많은 데이터를 저장하고 있다고 할 수 있다.

Java 9, Java 10의 HashMap이 어떤 모습일지 지금은 알 수 없지만, 
컴퓨팅 환경은 계속 변하고 그에 맞춰 HashMap 구현도 계속 변할 수밖에 없다는 것은 자명하다.